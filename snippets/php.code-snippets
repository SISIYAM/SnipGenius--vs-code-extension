{
  "Database Connection -SnipGenius": {
    "prefix": "dbconn",
    "body": [
      "$$servername = \"$1\";",
      "$$username = \"$2\";",
      "$$password = \"$3\";",
      "$$dbname = \"$4\";",
      "$$conn = mysqli_connect($$servername, $$username, $$password, $$dbname);",
      "",
      "if (!$$conn) {",
      "  die(\"Connection failed: \" . mysqli_connect_error());",
      "}",
      "$0"
    ],
    "description": "Generates a procedural database connection snippet"
  },

  "SELECT Query -SnipGenius": {
    "prefix": "dbread",
    "body": [
      "$$sql = \"SELECT $1 FROM $2 WHERE $3 = '$4';\";",
      "$$result = mysqli_query($$conn, $$sql);",
      "",
      "if (mysqli_num_rows($$result) > 0) {",
      "  while ($$row = mysqli_fetch_assoc($$result)) {",
      "    $0",
      "  }",
      "} else {",
      "  echo '0 results';",
      "}"
    ],
    "description": "Generates a SELECT query snippet"
  },

  "Insert Query  -SnipGenius": {
    "prefix": "dbwrite",
    "body": [
      "$$sql = \"INSERT INTO $1 ($2) VALUES ('$3');\";",
      "$$result = mysqli_query($$conn, $$sql);",
      "",
      "if ($$result) {",
      "  echo 'New record created successfully';",
      "} else {",
      "  echo 'Error: ' . mysqli_error($$conn);",
      "}",
      "$0"
    ],
    "description": "Generates an INSERT statement snippet"
  },

  "Update Query  -SnipGenius": {
    "prefix": "dbupdate",
    "body": [
      "$$sql = \"UPDATE $1 SET $2 = '$3' WHERE $4 = '$5';\";",
      "$$result = mysqli_query($$conn, $$sql);",
      "",
      "if ($$result) {",
      "  echo 'Record updated successfully';",
      "} else {",
      "  echo 'Error: ' . mysqli_error($$conn);",
      "}",
      "$0"
    ],
    "description": "Generates an UPDATE statement snippet"
  },
  "Delete Query  -SnipGenius": {
    "prefix": "dbdelete",
    "body": [
      "$$sql = \"DELETE FROM $1 WHERE $2 = '$3';\";",
      "$$result = mysqli_query($$conn, $$sql);",
      "",
      "if ($$result) {",
      "  echo 'Record deleted successfully';",
      "} else {",
      "  echo 'Error: ' . mysqli_error($$conn);",
      "}",
      "$0"
    ],
    "description": "Generates a DELETE statement snippet"
  },

  "Form Handling  -SnipGenius": {
    "prefix": "fiq",
    "body": [
      "if (isset($$_POST['submit'])) { // Here submit is the name of the button that submits the form",
      "  $$name = mysqli_real_escape_string($$conn, $$_POST['name']);",
      "  $$email = mysqli_real_escape_string($$conn, $$_POST['email']);",
      "  $$sql = \"INSERT INTO users (name, email) VALUES ('$$name', '$$email');\";",
      "  if (mysqli_query($$conn, $$sql)) {",
      "    echo 'New record created successfully';",
      "  } else {",
      "    echo 'Error: ' . mysqli_error($$conn);",
      "  }",
      "}"
    ],
    "description": "Handles form data submission and insertion into the database"
  },

  "Query Error Check  -SnipGenius": {
    "prefix": "qch",
    "body": [
      "$$result = mysqli_query($$conn, $$sql);",
      "if (!$$result) {",
      "  echo 'Query Error: ' . mysqli_error($$conn);",
      "} else {",
      "  $0",
      "}"
    ],
    "description": "Checks for errors after running a MySQL query"
  },

  "Class Definition  -SnipGenius": {
    "prefix": "clsdef",
    "body": [
      "class className {",
      "  private $$property1 = 'default1';",
      "  private $$property2 = 'default2';",
      "",
      "  public function __construct($$property1 = 'default1', $$property2 = 'default2') {",
      "    $$$this->$$property1 = $$property1;",
      "    $$this->$$property2 = $$property2;",
      "  }",
      "",
      "  public function getProperty1() {",
      "    return $$this->$$property1;",
      "  }",
      "",
      "  public function setProperty1($$property1) {",
      "    $$this->$$property1 = $$property1;",
      "  }",
      "",
      "  public function getProperty2() {",
      "    return $$this->$$property2;",
      "  }",
      "",
      "  public function setProperty2($$property2) {",
      "    $$this->$$property2 = $$property2;",
      "  }",
      "}",
      "",
      "// Usage Example",
      "// Create an instance of the class with default values",
      "$$obj = new className();",
      "",
      "// Create an instance with custom values",
      "$$obj = new className('value1', 'value2');",
      "",
      "// Access and modify properties",
      "$$obj->setProperty1('new value1');",
      "$$property1 = $$obj->getProperty1();",
      "$$obj->setProperty2('new value2');",
      "$$property2 = $$obj->getProperty2();",
      ""
    ],
    "description": "Generates a basic PHP class definition with properties, methods, default values, and usage examples"
  },

  "Class Database Connection  -SnipGenius": {
    "prefix": "cdbconn",
    "body": [
      "class Database {",
      "  private $$servername = 'localhost';",
      "  private $$username = 'root';",
      "  private $$password = '';",
      "  private $$dbname = 'test';",
      "  private $$conn;",
      "",
      "  public function __construct($$servername = 'localhost', $$username = 'root', $$password = '', $$dbname = 'test') {",
      "    $$this->$$servername = $$servername;",
      "    $$this->$$username = $$username;",
      "    $$this->$$password = $$password;",
      "    $$this->$$dbname = $$dbname;",
      "    $$this->connect();",
      "  }",
      "",
      "  private function connect() {",
      "    $$this->$$conn = new mysqli($$this->$$servername, $$this->$$username, $$this->$$password, $$this->$$dbname);",
      "    if ($$this->$$conn->connect_error) {",
      "      die(\"Connection failed: \" . $$this->$$conn->connect_error);",
      "    }",
      "  }",
      "",
      "  public function getConnection() {",
      "    return $$this->$$conn;",
      "  }",
      "}",
      "",
      "// Usage Example",
      "// Create an instance of the Database class",
      "$$db = new Database();",
      "",
      "// Create an instance with custom values",
      "$$db = new Database('localhost', 'user', 'password', 'database');",
      "",
      "// Access the connection object",
      "$$conn = $$db->getConnection();",
      ""
    ],
    "description": "Generates a PHP class for database connection using OOP with default values and usage examples"
  },

  "Insert Query Method  -SnipGenius": {
    "prefix": "fdbwrite",
    "body": [
      "public function insert($$table, $$columns, $$values) {",
      "  $$sql = \"INSERT INTO $$table ($$columns) VALUES ($$values);\";",
      "  $result = mysqli_query($$this->$$conn, $$sql);",
      "  if (!$$result) {",
      "    die(\"Query Error: \" . mysqli_error($$this->$$conn));",
      "  }",
      "  return $$result;",
      "}",
      "",
      "// Usage Example",
      "// Create an instance of the Database class",
      "$$db = new Database();",
      "",
      "// Insert data into 'users' table",
      "$$db->insert('users', 'name, email', '\"Jon snow\", \"jon@example.com\"');"
    ],
    "description": "Generates an insert query method for the Database class. Use with `insert($table, $columns, $values)`."
  },

  "Update Query Method  -SnipGenius": {
    "prefix": "fdbupdate",
    "body": [
      "public function update($$table, $$set, $$conditions) {",
      "  $$sql = \"UPDATE $$table SET $$set WHERE $$conditions;\";",
      "  $$result = mysqli_query($$this->$$conn, $$sql);",
      "  if (!$$result) {",
      "    die(\"Query Error: \" . mysqli_error($$this->$$conn));",
      "  }",
      "  return $$result;",
      "}",
      "",
      "// Usage Example",
      "// Create an instance of the Database class",
      "$$db = new Database();",
      "",
      "// Update data in 'users' table",
      "$$db->update('users', 'email = \"newemail@example.com\"', 'name = \"John snow\"');"
    ],
    "description": "Generates an update query method for the Database class. Use with `update($table, $set, $conditions)`."
  },

  "Select Query Method  -SnipGenius": {
    "prefix": "fdbread",
    "body": [
      "public function select($$table, $$columns, $$conditions = '') {",
      "  $$sql = \"SELECT $$columns FROM $$table WHERE $$conditions;\";",
      "  $$result = mysqli_query($$this->$$conn, $$sql);",
      "  if (!$$result) {",
      "    die(\"Query Error: \" . mysqli_error($$this->$$conn));",
      "  }",
      "  return $$result;",
      "}",
      "",
      "// Usage Example",
      "// Create an instance of the Database class",
      "$$db = new Database();",
      "",
      "// Select data from 'users' table",
      "$$result = $$db->select('users', '*', 'name = \"John snow\"');",
      "while ($$row = mysqli_fetch_assoc($$result)) {",
      "  echo $$row['name'] . \" - \" . $$row['email'];",
      "}"
    ],
    "description": "Generates a select query method for the Database class. Use with `select($table, $columns, $conditions)`."
  },

  "Delete Query Method  -SnipGenius": {
    "prefix": "fdbdelete",
    "body": [
      "public function delete($$table, $$conditions) {",
      "  $$sql = \"DELETE FROM $$table WHERE $$conditions;\";",
      "  $$result = mysqli_query($this->$$conn, $$sql);",
      "  if (!$$result) {",
      "    die(\"Query Error: \" . mysqli_error($$this->$$conn));",
      "  }",
      "  return $$result;",
      "}",
      "",
      "// Usage Example",
      "// Create an instance of the Database class",
      "$$db = new Database();",
      "",
      "// Delete data from 'users' table",
      "$$db->delete('users', 'name = \"John snow\"');"
    ],
    "description": "Generates a delete query method for the Database class. Use with `delete($table, $conditions)`."
  },

  "OOP Database Connection  -SnipGenius": {
    "prefix": "odbconn",
    "body": [
      "$$servername = \"$1\";",
      "$$username = \"$2\";",
      "$$password = \"$3\";",
      "$$dbname = \"$4\";",
      "$$conn = new mysqli($$servername, $$username, $$password, $$dbname);",
      "",
      "if ($$conn->connect_error) {",
      "  die(\"Connection failed: \" . $$conn->connect_error);",
      "}",
      "$0"
    ],
    "description": "Generates a database connection snippet"
  },

  "PDO Connection  -SnipGenius": {
    "prefix": "pdoconnect",
    "body": [
      "$$dsn = 'mysql:host=$1;dbname=$2';",
      "$$username = \"$3\";",
      "$$password = \"$4\";",
      "",
      "try {",
      "  $$pdo = new PDO($$dsn, $$username, $$password);",
      "  $$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);",
      "  echo 'Connected successfully';",
      "} catch (PDOException $$e) {",
      "  echo 'Connection failed: ' . $$e->getMessage();",
      "}",$
      "$0"
    ],
    "description": "Generates a PDO database connection snippet"
  },

  "OOP SELECT Query  -SnipGenius": {
    "prefix": "odbread",
    "body": [
      "$$sql = 'SELECT * FROM $1';",
      "$$result = $$conn->query($$sql);",
      "",$
      "if ($$result->num_rows > 0) {",
      "  while ($$row = $$result->fetch_assoc()) {",
      "    // Process row",
      "  }",
      "} else {",
      "  echo '0 results';",
      "}"
    ],
    "description": "Generates a OOP SELECT query"
  },

  "OOP Insert Data  -SnipGenius": {
    "prefix": "odbwrite",
    "body": [
      "$$sql = \"INSERT INTO $1 ($2) VALUES ('$3');\";",
      "$$result = $$conn->query($$sql);",
      "",
      "if ($$result === TRUE) {",
      "  echo 'New record created successfully';",
      "} else {",
      "  echo 'Error: ' . $$sql . '<br>' . $$conn->error;",
      "}",
      "$0"
    ],
    "description": "Generates an INSERT statement"
  },

  "OOP Update Data  -SnipGenius": {
    "prefix": "odbupdate",
    "body": [
      "$$sql = \"UPDATE $1 SET $2 = '$3' WHERE $4 = '$5';\";",
      "$$result = $$conn->query($$sql);",
      "",
      "if ($$result === TRUE) {",
      "  echo 'Record updated successfully';",
      "} else {",
      "  echo 'Error: ' . $$sql . '<br>' . $$conn->error;",
      "}",
      "$0"
    ],
    "description": "Generates an OOP UPDATE statement"
  },

  "OOP Delete Data  -SnipGenius": {
    "prefix": "odbdelete",
    "body": [
      "$$sql = \"DELETE FROM $1 WHERE $2 = '$3';\";",
      "$$result = $$conn->query($$sql);",
      "",
      "if ($$result === TRUE) {",$
      "  echo 'Record deleted successfully';",
      "} else {",
      "  echo 'Error: ' . $$sql . '<br>' . $$conn->error;",
      "}",
      "$0"
    ],
    "description": "Generates an OOP DELETE statement"
  },

  "OOP Prepared Statement  -SnipGenius": {
    "prefix": "prepstmt",
    "body": [
      "$$stmt = $$conn->prepare(\"$1\");",
      "$$stmt->bind_param(\"$2\", $3);",
      "$$stmt->execute();",
      "",
      "$$result = $$stmt->get_result();",
      "if ($$result->num_rows > 0) {",
      "  while ($$row = $$result->fetch_assoc()) {",
      "    $0",
      "  }",
      "} else {",
      "  echo '0 results';",
      "}",
      "$$stmt->close();"
    ],
    "description": "Generates an OOP prepared statement"
  },
  "If-Else  -SnipGenius": {
    "prefix": "ifelse",
    "body": [
      "if ($1) {",
      "  $0",
      "} else {",
      "  // Alternative code",
      "}"
    ],
    "description": "Creates a basic if-else statement."
  },
  "If-Else if-else  -SnipGenius": {
    "prefix": "ifelseif",
    "body": [
      "if ($1) {",
      "  $2",
      "} else if ($3) {",
      "  $4",
      "} else {",
      "  $5",
      "}"
    ],
    "description": "Creates a basic if-else if-else statement. Replace $1 with the condition for the first if block, $2 with the code for the first block, $3 with the condition for the else if block, $4 with the code for the else if block, and $5 with the code for the else block."
  },
  "Foreach Loop  -SnipGenius": {
    "prefix": "foreach",
    "body": [
      "foreach ($$array as $$key => $$value) {",
      "  $0",
      "}"
    ],
    "description": "Creates a foreach loop."
  },
  "Try-Catch Block  -SnipGenius": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "  $1",
      "} catch (Exception $$e) {",
      "  echo 'Error: ' . $$e->getMessage();",
      "}"
    ],
    "description": "Creates a try-catch block."
  },
  "Include File  -SnipGenius": {
    "prefix": "inc",
    "body": [
      "include '$1'; // Your file path"
    ],
    "description": "Includes a PHP file."
  },
  "Require File  -SnipGenius": {
    "prefix": "rqr",
    "body": [
      "require '$1'; // Your file path"
    ],
    "description": "Requires a PHP file."
  },
  "Include Once  -SnipGenius": {
    "prefix": "inco",
    "body": [
        "include_once '${1:file_path}';"
    ],
    "description": "'include_once' statement"
},
"Require Once  -SnipGenius": {
  "prefix": "rqro",
  "body": [
      "require_once '${1:file_path}';"
  ],
  "description": "'require_once' statement"
},
  "Session Start  -SnipGenius": {
    "prefix": "sessionstart",
    "body": [
      "session_start();",
      "",
      "$$user = $$_SESSION['user'];",
      "$0"
    ],
    "description": "Starts a PHP session."
  },
  "HTTP Header  -SnipGenius": {
    "prefix": "hdr",
    "body": [
      "header('$1');"
    ],
    "description": "Sends a raw HTTP header."
  },
  "Set Cookie  -SnipGenius": {
    "prefix": "setcookie",
    "body": [
      "setcookie($$key, $$value, time() + (86400 * 30), '/');",
      "$0"
    ],
    "description": "Sets a cookie."
  },
  "Get Request  -SnipGenius": {
    "prefix": "get",
    "body": [
      "$$value = $$_GET['$1'];",
      "$0"
    ],
    "description": "Retrieves data from a GET request."
  },
  "Post Request  -SnipGenius": {
    "prefix": "post",
    "body": [
      "$$value = $$_POST['$1'];",
      "$0"
    ],
    "description": "Retrieves data from a POST request."
  },
  "Date and Time  -SnipGenius": {
    "prefix": "date",
    "body": [
      "echo date('Y-m-d H:i:s');"
    ],
    "description": "Gets the current date and time."
  },
  "DateTime Format 1  -SnipGenius": {
    "prefix": "datetime1",
    "body": [
      "echo date('d/m/y H:i:s'); // Example: 11/12/24 16:30:59"
    ],
    "description": "Outputs the current date and time in the format dd/mm/yy HH:mm:ss."
  },
  "Date Format 1  -SnipGenius": {
    "prefix": "dMy",
    "body": [
      "echo date('d M Y'); // Example: 11 Dec 2024"
    ],
    "description": "Outputs the current date in the format dd M yyyy."
  },
  "Time Format 1  -SnipGenius": {
    "prefix": "timeA",
    "body": [
      "echo date('g:i A'); // Example: 4:30 PM"
    ],
    "description": "Outputs the current time in the format h:i AM/PM."
  }, 
  "Day and Month Format  -SnipGenius": {
    "prefix": "daymonth",
    "body": [
      "echo date('l F Y'); // Example: Wednesday June 2024"
    ],
    "description": "Outputs the current day and month in the format l F Y."
  },
  "Print Array  -SnipGenius": {
    "prefix": "pra",
    "body": [
      "echo '<pre>';",
      "print_r($$array);",
      "echo '</pre>';"
    ],
    "description": "Prints an array in a readable format. Replace $$array with the array variable."
  },
  "Check Variable Set  -SnipGenius": {
    "prefix": "issetcheck",
    "body": [
      "if (isset($$variable)) {",
      "  // Variable is set",
      "} else {",
      "  // Variable is not set",
      "}"
    ],
    "description": "Checks if a variable is set. Replace $$variable with the variable name."
  },
  "File Upload  -SnipGenius": {
    "prefix": "fileupload",
    "body": [
      "if ($$_FILES['$1']['error'] == UPLOAD_ERR_OK) {",
      "  move_uploaded_file($$_FILES['$1']['tmp_name'], '$2');",
      "  echo 'File uploaded successfully';",
      "} else {",
      "  echo 'File upload error: ' . $$_FILES['$1']['error'];",
      "}"
    ],
    "description": "Handles file upload. Replace $1 with the file input name and $2 with the destination path."
  },
  "Generate Random String  -SnipGenius": {
    "prefix": "randstring",
    "body": [
      "$$length = $1;",
      "$$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
      "$$randomString = '';",
      "for ($$i = 0; $$i < $$length; $$i++) {",
      "  $$randomString .= $$chars[rand(0, strlen($$chars) - 1)];",
      "}",
      "echo $$randomString;"
    ],
    "description": "Generates a random string of a given length. Replace $1 with the length of the string."
  },
  "Send Email  -SnipGenius": {
    "prefix": "sendemail",
    "body": [
      "$$to = '$1';",
      "$$subject = '$2';",
      "$$message = '$3';",
      "$$headers = 'From: no-reply@example.com';",
      "mail($$to, $$subject, $$message, $$headers);"
    ],
    "description": "Sends an email. Replace $1 with the recipient, $2 with the subject, and $3 with the message."
  },
  "Check File Exists  -SnipGenius": {
    "prefix": "fileexists",
    "body": [
      "if (file_exists('$1')) {",
      "  echo 'File exists';",
      "} else {",
      "  echo 'File does not exist';",
      "}"
    ],
    "description": "Checks if a file exists. Replace $1 with the file path."
  },
  "Read File  -SnipGenius": {
    "prefix": "readfile",
    "body": [
      "$$content = file_get_contents('$1');",
      "if ($$content !== false) {",
      "  echo $$content;",
      "} else {",
      "  echo 'Failed to read file';",
      "}"
    ],
    "description": "Reads the content of a file. Replace $1 with the file path."
  },
  "Write to File  -SnipGenius": {
    "prefix": "writefile",
    "body": [
      "$$content = '$2';",
      "file_put_contents('$1', $$content);",
      "echo 'File written successfully';"
    ],
    "description": "Writes content to a file. Replace $1 with the file path and $2 with the content."
  },
  "Sanitize Input  -SnipGenius": {
    "prefix": "sanitize",
    "body": [
      "$$input = filter_var('$1', FILTER_SANITIZE_STRING);",
      "echo $$input;"
    ],
    "description": "Sanitizes input data. Replace $1 with the input value."
  },
  "Validate Email  -SnipGenius": {
    "prefix": "validateemail",
    "body": [
      "$$email = '$1';",
      "if (filter_var($$email, FILTER_VALIDATE_EMAIL)) {",
      "  echo 'Valid email address';",
      "} else {",
      "  echo 'Invalid email address';",
      "}"
    ],
    "description": "Validates an email address. Replace $1 with the email address."
  },
  "Generate UUID  -SnipGenius": {
    "prefix": "uuid",
    "body": [
      "$$uuid = bin2hex(random_bytes(16));",
      "$$uuid = vsprintf('%s-%s-%s-%s-%s', str_split($$uuid, 4));",
      "echo $$uuid;"
    ],
    "description": "Generates a UUID."
  },
  "Check Array  -SnipGenius": {
    "prefix": "isarray",
    "body": [
      "if (is_array($$variable)) {",
      "  echo 'Variable is an array';",
      "} else {",
      "  echo 'Variable is not an array';",
      "}"
    ],
    "description": "Checks if a variable is an array. Replace $$variable with the variable name."
  },
  "Array to JSON  -SnipGenius": {
    "prefix": "arraytojson",
    "body": [
      "$$json = json_encode($$array);",
      "echo $$json;"
    ],
    "description": "Converts an array to JSON format. Replace $$array with the array variable."
  },
  "JSON to Array  -SnipGenius": {
    "prefix": "jsontoparray",
    "body": [
      "$$array = json_decode('$1', true);",
      "print_r($$array);"
    ],
    "description": "Decodes JSON string to an array. Replace $1 with the JSON string."
  },
  "String Contains  -SnipGenius": {
    "prefix": "strcontains",
    "body": [
      "if (strpos('$1', '$2') !== false) {",
      "  echo 'Substring found';",
      "} else {",
      "  echo 'Substring not found';",
      "}"
    ],
    "description": "Checks if a string contains a substring. Replace $1 with the main string and $2 with the substring."
  },
  "Current Timestamp  -SnipGenius": {
    "prefix": "timestamp",
    "body": [
      "$$timestamp = time();",
      "echo $$timestamp;"
    ],
    "description": "Gets the current Unix timestamp."
  },
  "Date Difference  -SnipGenius": {
    "prefix": "datediff",
    "body": [
      "$$date1 = new DateTime('$1');",
      "$$date2 = new DateTime('$2');",
      "$$interval = $$date1->diff($$date2);",
      "echo $$interval->format('%y years, %m months, %d days');"
    ],
    "description": "Calculates the difference between two dates. Replace $1 and $2 with the dates."
  },
  "Check Empty  -SnipGenius": {
    "prefix": "isempty",
    "body": [
      "if (empty($$variable)) {",
      "  echo 'Variable is empty';",
      "} else {",
      "  echo 'Variable is not empty';",
      "}"
    ],
    "description": "Checks if a variable is empty. Replace $$variable with the variable name."
  },
  "Validate URL  -SnipGenius": {
    "prefix": "validateurl",
    "body": [
      "$$url = '$1';",
      "if (filter_var($$url, FILTER_VALIDATE_URL)) {",
      "  echo 'Valid URL';",
      "} else {",
      "  echo 'Invalid URL';",
      "}"
    ],
    "description": "Validates a URL. Replace $1 with the URL."
  },
  "Format Date  -SnipGenius": {
    "prefix": "formatdate",
    "body": [
      "$$date = new DateTime('$1');",
      "echo $$date->format('$2');"
    ],
    "description": "Formats a date. Replace $1 with the date string and $2 with the format (e.g., 'Y-m-d')."
  },
  "Trim Whitespace  -SnipGenius": {
    "prefix": "trimspace",
    "body": [
      "$$trimmed = trim('$1');",
      "echo $$trimmed;"
    ],
    "description": "Trims whitespace from a string. Replace $1 with the string."
  },
  "To Uppercase  -SnipGenius": {
    "prefix": "toupper",
    "body": [
      "$$uppercase = strtoupper('$1');",
      "echo $$uppercase;"
    ],
    "description": "Converts a string to uppercase. Replace $1 with the string."
  },
  "To Lowercase  -SnipGenius": {
    "prefix": "tolower",
    "body": [
      "$$lowercase = strtolower('$1');",
      "echo $$lowercase;"
    ],
    "description": "Converts a string to lowercase. Replace $1 with the string."
  },
  "Check Writable  -SnipGenius": {
    "prefix": "iswritable",
    "body": [
      "if (is_writable('$1')) {",
      "  echo 'File is writable';",
      "} else {",
      "  echo 'File is not writable';",
      "}"
    ],
    "description": "Checks if a file is writable. Replace $1 with the file path."
  },
  "File Size  -SnipGenius": {
    "prefix": "filesize",
    "body": [
      "$$size = filesize('$1');",
      "echo 'File size: ' . $$size . ' bytes';"
    ],
    "description": "Calculates the size of a file in bytes. Replace $1 with the file path."
  },
  "File Extension  -SnipGenius": {
    "prefix": "fileext",
    "body": [
      "$$extension = pathinfo('$1', PATHINFO_EXTENSION);",
      "echo 'File extension: ' . $$extension;"
    ],
    "description": "Gets the extension of a file. Replace $1 with the file path."
  },
  "Count Words  -SnipGenius": {
    "prefix": "countwords",
    "body": [
      "$$wordCount = str_word_count('$1');",
      "echo 'Word count: ' . $$wordCount;"
    ],
    "description": "Counts the number of words in a string. Replace $1 with the string."
  },
  "Replace Text  -SnipGenius": {
    "prefix": "replacetext",
    "body": [
      "$$newString = str_replace('$1', '$2', '$3');",
      "echo $$newString;"
    ],
    "description": "Replaces text in a string. Replace $1 with the search text, $2 with the replacement text, and $3 with the original string."
  },
  "Find Text  -SnipGenius": {
    "prefix": "findtext",
    "body": [
      "$$position = strpos('$1', '$2');",
      "if ($$position !== false) {",
      "  echo 'Text found at position: ' . $$position;",
      "} else {",
      "  echo 'Text not found';",
      "}"
    ],
    "description": "Finds text in a string. Replace $1 with the string and $2 with the search text."
  },
  "Extract Substring  -SnipGenius": {
    "prefix": "substring",
    "body": [
      "$$substring = substr('$1', $2, $3);",
      "echo $$substring;"
    ],
    "description": "Extracts a substring from a string. Replace $1 with the string, $2 with the start position, and $3 with the length."
  },
  "Random Integer  -SnipGenius": {
    "prefix": "randint",
    "body": [
      "$$min = $1;",
      "$$max = $2;",
      "$$randomInt = rand($$min, $$max);",
      "echo $$randomInt;"
    ],
    "description": "Generates a random integer between min and max values. Replace $1 with min and $2 with max."
  },
  "String Length  -SnipGenius": {
    "prefix": "strlen",
    "body": [
      "$$length = strlen('$1');",
      "echo 'String length: ' . $$length;"
    ],
    "description": "Calculates the length of a string. Replace $1 with the string."
  },
  "File Modification Time  -SnipGenius": {
    "prefix": "filemtime",
    "body": [
      "$$mtime = filemtime('$1');",
      "echo 'File last modified: ' . date('Y-m-d H:i:s', $$mtime);"
    ],
    "description": "Gets the last modification time of a file. Replace $1 with the file path."
  },
  "Validate Integer  -SnipGenius": {
    "prefix": "validateint",
    "body": [
      "$$number = '$1';",
      "if (filter_var($$number, FILTER_VALIDATE_INT) !== false) {",
      "  echo 'Valid integer';",
      "} else {",
      "  echo 'Invalid integer';",
      "}"
    ],
    "description": "Validates if a value is an integer. Replace $1 with the value."
  },
  "For loop  -SnipGenius": {
    "prefix":"forloop",
    "body": [
      "for($$i = 0, $$i < condition, $$i ++)",
      "{",
      "echo $$i;",
      "}"
    ]
  },
  "Constructor method -SnipGenius": {
    "prefix": "_c",
    "body": [
        "public function __construct($${1:parameters})",
        "{",
        "\t$0",
        "}"
    ],
    "description": "Constructor method"
},
"Error Logging - SnipGenius": {
  "prefix": "errorlog",
  "body": [
    "if (!$$result) {",
    "  error_log('Error: ' . mysqli_error($$conn));",
    "}"
  ],
  "description": "Logs errors to the PHP error log file."
},
"Custom Error Handler - SnipGenius": {
  "prefix": "errorCustom",
  "body": [
    "function customError($$errno, $$errstr, $$errfile, $$errline) {",
    "  echo \"Error: [$$errno] $$errstr - $$errfile:$$errline\\n\";",
    "  // You can also log errors or handle them differently here",
    "}",
    "set_error_handler('customError');",
    "",
    "// Example usage",
    "$$result = someFunction();",
    "if (!$$result) {",
    "  trigger_error('Something went wrong!', E_USER_ERROR);",
    "}"
  ],
  "description": "Sets a custom error handler function."
},
"Shorthand If Statement - SnipGenius": {
  "prefix": "?if",
  "body": [
    "$$result = $$condition ? '$$trueValue' : '$$falseValue';"
  ],
  "description": "Shorthand if statement (ternary operator) for concise conditional assignments."
},
"Nested If Statements - SnipGenius": {
  "prefix": "iif",
  "body": [
    "if ($$condition1) {",
    "  if ($$condition2) {",
    "    // Code for condition2",
    "  } else {",
    "    // Code for the else case of condition2",
    "  }",
    "} else {",
    "  // Code for the else case of condition1",
    "}"
  ],
  "description": "Creates nested if statements for more complex conditional logic."
},
"Switch Statement - SnipGenius": {
  "prefix": "switch",
  "body": [
    "switch ($$expression) {",
    "  case $$label1:",
    "    // Code block for label1",
    "    break;",
    "  case $$label2:",
    "    // Code block for label2",
    "    break;",
    "  case $$label3:",
    "    // Code block for label3",
    "    break;",
    "  default:",
    "    // Code block for default case",
    "}"
  ],
  "description": "Creates a switch statement with multiple cases."
},
"Do-While Loop - SnipGenius": {
  "prefix": "dowhile",
  "body": [
    "do {",
    "  // Code block to execute",
    "} while ($$condition);"
  ],
  "description": "Creates a do-while loop in PHP."
},
"While Loop - SnipGenius": {
  "prefix": "while",
  "body": [
    "while ($$condition) {",
    "  // Code block to execute",
    "}"
  ],
  "description": "Creates a while loop in PHP."
},
"Array Splice - SnipGenius": {
  "prefix": "array_splice",
  "body": [
    "$$array = [/* array elements */];",
    "array_splice($$array, $$offset, $$length, $$replacement);",
    "// $$array now contains the modified array"
  ],
  "description": "Modifies an array by removing or replacing elements."
},
"Multidimensional Arrays - SnipGenius": {
  "prefix": "multiarray",
  "body": [
    "$$array = [",
    "  [\"key1\" => \"value1\", \"key2\" => \"value2\"],",
    "  [\"key1\" => \"value3\", \"key2\" => \"value4\"],",
    "  [\"key1\" => \"value5\", \"key2\" => \"value6\"]",
    "];",
    "",
    "// Accessing an element",
    "$$element = $$array[0][\"key1\"]; // $$element is \"value1\"",
    "",
    "// Loop through multidimensional array",
    "foreach ($$array as $$subArray) {",
    "  foreach ($$subArray as $$key => $$value) {",
    "    echo \"$$key: $$value\\n\";",
    "  }",
    "}"
  ],
  "description": "Defines and accesses elements in a multidimensional array."
},
"Array Functions - SnipGenius": {
  "prefix": "arrayfunc",
  "body": [
    "// array_merge - Merges one or more arrays",
    "$$mergedArray = array_merge($$array1, $$array2);",
    "",
    "// array_diff - Computes the difference of arrays",
    "$$diffArray = array_diff($$array1, $$array2);",
    "",
    "// array_filter - Filters elements of an array using a callback function",
    "$$filteredArray = array_filter($$array, function($$value) {",
    "  return $$value > 10;",
    "});",
    "",
    "// array_map - Applies a callback function to each element of the array",
    "$$mappedArray = array_map(function($$value) {",
    "  return $$value * 2;",
    "}, $$array);",
    "",
    "// array_reduce - Iteratively reduces the array to a single value using a callback function",
    "$$sum = array_reduce($$array, function($$carry, $$item) {",
    "  return $$carry + $$item;",
    "}, 0);",
    "",
    "// in_array - Checks if a value exists in an array",
    "$$exists = in_array($$value, $$array);",
    "",
    "// array_key_exists - Checks if the given key or index exists in the array",
    "$$exists = array_key_exists('key', $$array);",
    "",
    "// array_slice - Extracts a slice of the array",
    "$$slice = array_slice($$array, 1, 3); // Extracts 3 elements starting from index 1",
    "",
    "// array_splice - Removes and returns a portion of the array",
    "$$spliced = array_splice($$array, 2, 2); // Removes 2 elements starting from index 2",
    "",
    "// sort - Sorts an array",
    "sort(\$$array); // Sorts the array in ascending order"
  ],
  "description": "Common PHP array functions and their usage."
},
"Multiple Insert PDO -SnipGenius": {
  "prefix": "pdoim",
  "body": [
    "$$pdo = new PDO('mysql:host=$1;dbname=$2', '$3', '$4');",
    "$$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);",
    "",
    "$$sql = 'INSERT INTO $5 (column1, column2, column3) VALUES (?, ?, ?)';",
    "$$stmt = $$pdo->prepare($$sql);",
    "",
    "$$data = [",
    "    [$6, $7, $8],",
    "    [$9, $10, $11],",
    "    // Add more rows as needed",
    "];",
    "",
    "foreach ($$data as $$row) {",
    "    $$stmt->execute($$row);",
    "}",
    "",
    "echo 'Records inserted successfully';",
  ],
  "description": "PHP snippet for performing multiple inserts into a database using PDO"
}
}
